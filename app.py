from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional
import uvicorn
import json
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
from main import MultiAgentSystem

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Multi-Agent System API",
    description="API –¥–ª—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
system = None

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class QuestionRequest(BaseModel):
    question: str = Field('What lemur was classified in 2015 and has a conservation status that has not been evaluated and has an average size over 200 ?',
                           description="–í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    use_rag: Optional[bool] = True

class QuestionResponse(BaseModel):
    status: str
    question: str
    answer: str
    reasoning: str
    confidence: float
    function_calls: list
    processing_time_seconds: float
    session_id: str
    agents_involved: list
    timestamp: str

class ErrorResponse(BaseModel):
    error: str
    details: str
    timestamp: str

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    global system
    try:
        system = MultiAgentSystem("preprocessed_data")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API"""
    return {
        "message": "Multi-Agent System API",
        "version": "1.0.0",
        "status": "ready" if system else "not_initialized",
        "endpoints": {
            "/ask": "POST - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–µ",
            "/health": "GET - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
            "/stats": "GET - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "/docs": "GET - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "/redoc": "GET - ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    if not system:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "system_initialized": True,
        "rag_available": hasattr(system.rag_agent, 'vectorstore') and system.rag_agent.vectorstore is not None,
        "data_loaded": len(system.data_cache.get("questions", [])) > 0
    }

@app.get("/stats")
async def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not system:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        "questions_loaded": len(system.data_cache.get("questions", [])),
        "tables_loaded": len(system.data_cache.get("tables", {})),
        "nodes_loaded": sum(len(nodes) for nodes in system.data_cache.get("nodes_by_question", {}).values()),
        "rag_status": "available" if hasattr(system.rag_agent, 'vectorstore') and system.rag_agent.vectorstore else "unavailable",
        "session_id": system.session_id,
        "data_folder": system.data_folder
    }

@app.post("/ask", response_model=QuestionResponse)
async def ask_question(request: QuestionRequest):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    """
    if not system:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    if not request.question or len(request.question.strip()) == 0:
        raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    try:
        print(f"\nüìù –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {request.question}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        result = system.process_question(
            question=request.question.strip(),
            use_rag=request.use_rag
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –æ—Ç–≤–µ—Ç—É
        result["timestamp"] = datetime.now().isoformat()
        
        print(f"–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ –∑–∞ {result.get('processing_time_seconds', 0)} —Å–µ–∫")
        
        return QuestionResponse(**result)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return {
        "error": "Internal Server Error",
        "details": str(exc),
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 